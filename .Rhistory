plants <<- c(plants, plant_name)
}
}
else {
plants <<- c(stringer_bell)
}
}
add_beds <- function(number_of_beds) {
if (!(exists("bed_count", envir = .GlobalEnv))) {
for (i in 1:number_of_beds) {
assign(paste("bed_",toString(i),sep=""),
"",
envir = .GlobalEnv
)
}
bedcount <<- number_of_beds
}
else {
for (i in (bed_count + 1):(bed_count+number_of_beds)) {
assign(paste("bed_",toString(i),sep=""),
"",
envir = .GlobalEnv
)}
bedcount <<- bedcount + number_of_beds
}
}
add_beds(100)
add_plant("tomato", 80, 50)
add_plant("eggplant", 100, 50)
add_plant("squash", 67, 50)
add_plant("squash", 67, 50)
bedcount
add_plant <- function (plant_name, daystoharvest, harvestlength) {
stringer_bell = toString(plant_name)
assign(stringer_bell,
c("Plant",
rep("Maintain",ceiling(daystoharvest/7)),
rep("Harvest", ceiling(harvestlength/7)),
"Rip Out"
),
envir = .GlobalEnv)
if (exists("plants")) {
if (!(is.element(stringer_bell, plants))) {
plants <<- c(plants, plant_name)
}
}
else {
plants <<- c(stringer_bell)
}
}
add_beds <- function(number_of_beds) {
if (!(exists("bed_count", envir = .GlobalEnv))) {
for (i in 1:number_of_beds) {
assign(paste("bed_",toString(i),sep=""),
"",
envir = .GlobalEnv
)
}
bedcount <<- number_of_beds
}
else {
for (i in (bed_count + 1):(bed_count+number_of_beds)) {
assign(paste("bed_",toString(i),sep=""),
"",
envir = .GlobalEnv
)}
bedcount <<- bedcount + number_of_beds
}
}
add_beds(100)
add_plant("tomato", 80, 50)
add_plant("eggplant", 100, 50)
add_plant("squash", 67, 50)
add_plant("squash", 67, 50)
add_beds(20)
exists("bed_count",envir = .GlobalEnv)
bed_count
bedcount
add_plant <- function (plant_name, daystoharvest, harvestlength) {
stringer_bell = toString(plant_name)
assign(stringer_bell,
c("Plant",
rep("Maintain",ceiling(daystoharvest/7)),
rep("Harvest", ceiling(harvestlength/7)),
"Rip Out"
),
envir = .GlobalEnv)
if (exists("plants")) {
if (!(is.element(stringer_bell, plants))) {
plants <<- c(plants, plant_name)
}
}
else {
plants <<- c(stringer_bell)
}
}
add_beds <- function(number_of_beds) {
if (!(exists("bedcount", envir = .GlobalEnv))) {
for (i in 1:number_of_beds) {
assign(paste("bed_",toString(i),sep=""),
"",
envir = .GlobalEnv
)
}
bedcount <<- number_of_beds
}
else {
for (i in (bedcount + 1):(bed_count+number_of_beds)) {
assign(paste("bed_",toString(i),sep=""),
"",
envir = .GlobalEnv
)}
bedcount <<- bedcount + number_of_beds
}
}
add_beds(100)
add_plant("tomato", 80, 50)
add_plant("eggplant", 100, 50)
add_plant("squash", 67, 50)
add_plant("squash", 67, 50)
add_plant <- function (plant_name, daystoharvest, harvestlength) {
stringer_bell = toString(plant_name)
assign(stringer_bell,
c("Plant",
rep("Maintain",ceiling(daystoharvest/7)),
rep("Harvest", ceiling(harvestlength/7)),
"Rip Out"
),
envir = .GlobalEnv)
if (exists("plants")) {
if (!(is.element(stringer_bell, plants))) {
plants <<- c(plants, plant_name)
}
}
else {
plants <<- c(stringer_bell)
}
}
add_beds <- function(number_of_beds) {
if (!(exists("bedcount", envir = .GlobalEnv))) {
for (i in 1:number_of_beds) {
assign(paste("bed_",toString(i),sep=""),
"",
envir = .GlobalEnv
)
}
bedcount <<- number_of_beds
}
else {
for (i in (bedcount + 1):(bedcount+number_of_beds)) {
assign(paste("bed_",toString(i),sep=""),
"",
envir = .GlobalEnv
)}
bedcount <<- bedcount + number_of_beds
}
}
add_beds(100)
add_plant("tomato", 80, 50)
add_plant("eggplant", 100, 50)
add_plant("squash", 67, 50)
add_plant("squash", 67, 50)
add_plant <- function (plant_name, daystoharvest, harvestlength) {
stringer_bell = toString(plant_name)
assign(stringer_bell,
c("Plant",
rep("Maintain",ceiling(daystoharvest/7)),
rep("Harvest", ceiling(harvestlength/7)),
"Rip Out"
),
envir = .GlobalEnv)
if (exists("plants")) {
if (!(is.element(stringer_bell, plants))) {
plants <<- c(plants, plant_name)
}
}
else {
plants <<- c(stringer_bell)
}
}
add_beds <- function(number_of_beds) {
if (!(exists("bedcount", envir = .GlobalEnv))) {
for (i in 1:number_of_beds) {
assign(paste("bed_",toString(i),sep=""),
"",
envir = .GlobalEnv
)
}
bedcount <<- number_of_beds
}
else {
for (i in (bedcount + 1):(bedcount+number_of_beds)) {
assign(paste("bed_",toString(i),sep=""),
"",
envir = .GlobalEnv
)}
bedcount <<- bedcount + number_of_beds
}
}
add_beds(100)
add_plant("tomato", 80, 50)
add_plant("eggplant", 100, 50)
add_plant("squash", 67, 50)
add_plant("squash", 67, 50)
bedcount
add_plant <- function (plant_name, daystoharvest, harvestlength) {
stringer_bell = toString(plant_name)
assign(stringer_bell,
c("Plant",
rep("Maintain",ceiling(daystoharvest/7)),
rep("Harvest", ceiling(harvestlength/7)),
"Rip Out"
),
envir = .GlobalEnv)
if (exists("plants")) {
if (!(is.element(stringer_bell, plants))) {
plants <<- c(plants, plant_name)
}
}
else {
plants <<- c(stringer_bell)
}
}
add_beds <- function(number_of_beds) {
if (!(exists("bedcount", envir = .GlobalEnv))) {
for (i in 1:number_of_beds) {
assign(paste("bed_",toString(i),sep=""),
"",
envir = .GlobalEnv
)
}
bedcount <<- number_of_beds
}
else {
for (i in (bedcount + 1):(bedcount+number_of_beds)) {
assign(paste("bed_",toString(i),sep=""),
"",
envir = .GlobalEnv
)}
bedcount <<- bedcount + number_of_beds
}
}
add_beds(100)
add_plant("tomato", 80, 50)
add_plant("eggplant", 100, 50)
add_plant("squash", 67, 50)
add_plant("squash", 67, 50)
add_plant <- function (plant_name, daystoharvest, harvestlength) {
stringer_bell = toString(plant_name)
assign(stringer_bell,
c("Plant",
rep("Maintain",ceiling(daystoharvest/7)),
rep("Harvest", ceiling(harvestlength/7)),
"Rip Out"
),
envir = .GlobalEnv)
if (exists("plants")) {
if (!(is.element(stringer_bell, plants))) {
plants <<- c(plants, plant_name)
}
}
else {
plants <<- c(stringer_bell)
}
}
add_beds <- function(number_of_beds) {
if (!(exists("bedcount", envir = .GlobalEnv))) {
for (i in 1:number_of_beds) {
assign(paste("bed_",toString(i),sep=""),
"",
envir = .GlobalEnv
)
}
bedcount <<- number_of_beds
}
else {
for (i in (bedcount + 1):(bedcount+number_of_beds)) {
assign(paste("bed_",toString(i),sep=""),
"",
envir = .GlobalEnv
)}
bedcount <<- bedcount + number_of_beds
}
}
add_beds(100)
add_plant("tomato", 80, 50)
add_plant("eggplant", 100, 50)
add_plant("squash", 67, 50)
add_plant("squash", 67, 50)
add_plant <- function (plant_name, daystoharvest, harvestlength) {
stringer_bell = toString(plant_name)
assign(stringer_bell,
c("Plant",
rep("Maintain",ceiling(daystoharvest/7)),
rep("Harvest", ceiling(harvestlength/7)),
"Rip Out"
),
envir = .GlobalEnv)
if (exists("plants")) {
if (!(is.element(stringer_bell, plants))) {
plants <<- c(plants, plant_name)
}
}
else {
plants <<- c(stringer_bell)
}
}
add_beds <- function(number_of_beds) {
if (!(exists("bedcount", envir = .GlobalEnv))) {
for (i in 1:number_of_beds) {
assign(paste("bed_",toString(i),sep=""),
"",
envir = .GlobalEnv
)
}
bedcount <<- number_of_beds
}
else {
for (i in (bedcount + 1):(bedcount+number_of_beds)) {
assign(paste("bed_",toString(i),sep=""),
"",
envir = .GlobalEnv
)}
bedcount <<- bedcount + number_of_beds
}
}
add_beds(100)
add_plant("tomato", 80, 50)
add_plant("eggplant", 100, 50)
add_plant("squash", 67, 50)
add_plant("squash", 67, 50)
bedcount
paste("bed",toString(10),sep="_")
?parse
parse("bed_10")
eval(parse("tomato"))
eval(parse("bed_10"))
parse("tomato")
x <- 42
eval(parse("x"))
?eval
setwd("C:\\Users\\Sean\\Documents\\Fantasy\\Fantasy Baseball 2015")
source("valuecalculator.R")
source("leaguesetup.R")
source("draftpicks.R")
source("mergeinprojections.R")
source("calculatestandings.R")
source("csvwriter.R")
names(standins)
names(standing\s)
names(standings)
setwd("C:\\Users\\Sean\\Documents\\Fantasy\\Fantasy Baseball 2015")
source("valuecalculator.R")
source("leaguesetup.R")
source("draftpicks.R")
source("mergeinprojections.R")
source("calculatestandings.R")
source("csvwriter.R")
standings
setwd("C:\\Users\\Sean\\Documents\\Fantasy\\Fantasy Baseball 2015")
source("valuecalculator.R")
source("leaguesetup.R")
source("draftpicks.R")
source("mergeinprojections.R")
source("calculatestandings.R")
source("csvwriter.R")
salary
standings
standings[,c(2:11)]
standings[,c(2:13)]
?mean
setwd("C:\\Users\\Sean\\Documents\\Fantasy\\Fantasy Baseball 2015")
source("valuecalculator.R")
source("leaguesetup.R")
source("draftpicks.R")
source("mergeinprojections.R")
source("calculatestandings.R")
source("csvwriter.R")
graph <- ggplot(standings, x = left, y =total_points) + geom_point(shape = 1)
library(ggplot2)
graph <- ggplot(standings, x = left, y =total_points) + geom_point(shape = 1)
graph
standings
qplot(standings, x=left, y=total_points)
ggplot(data=standings, x=left, y = total_points)
ggplot(data=standings, x=left, y = total_points) + geom_point(shape = 1)
class(standings)
ggplot(data=standings, aes(x=left, y = total_points) + geom_point(shape = 1)
ggplot(data=standings, aes(x=left, y = total_points)) + geom_point(shape = 1)
graph <-    ggplot(data=standings, aes(x=left, y = total_points)) +
geom_point(shape = 1, size = 5)
graph
library(ggplot2)
pointsline <- mean(standings$total_points)
moneyline <- mean(standings$left)
graph <-    ggplot(data=standings, aes(x=left, y = total_points, label = rownames(standings))) +
geom_point(shape = 1, size = 5) +
geom_text()
graph
library(ggplot2)
pointsline <- mean(standings$total_points)
moneyline <- mean(standings$left)
graph <-    ggplot(data=standings, aes(x=left, y = total_points, label = rownames(standings))) +
geom_point(shape = 1, size = 5) +
geom_text(hjust = 0)
graph
library(ggplot2)
pointsline <- mean(standings$total_points)
moneyline <- mean(standings$left)
graph <-    ggplot(data=standings, aes(x=left, y = total_points, label = rownames(standings))) +
geom_point(shape = 1, size = 5) +
geom_text(hjust = 1)
graph
library(ggplot2)
pointsline <- mean(standings$total_points)
moneyline <- mean(standings$left)
graph <-    ggplot(data=standings, aes(x=left, y = total_points, label = rownames(standings))) +
geom_point(shape = 1, size = 5) +
geom_text(hjust = 2)
graph
library(ggplot2)
pointsline <- mean(standings$total_points)
moneyline <- mean(standings$left)
graph <-    ggplot(data=standings, aes(x=left, y = total_points, label = rownames(standings))) +
geom_point(shape = 1, size = 3) +
geom_text(hjust = 0)
graph
library(ggplot2)
pointsline <- mean(standings$total_points)
moneyline <- mean(standings$left)
graph <-    ggplot(data=standings, aes(x=left, y = total_points, label = rownames(standings))) +
geom_point(shape = 1, size = 3) +
geom_text(hjust = .5)
graph
library(ggplot2)
pointsline <- mean(standings$total_points)
moneyline <- mean(standings$left)
graph <-    ggplot(data=standings, aes(x=left, y = total_points, label = rownames(standings))) +
geom_point(shape = 1, size = 3) +
geom_text(hjust = 1)
graph
library(ggplot2)
pointsline <- mean(standings$total_points)
moneyline <- mean(standings$left)
graph <-    ggplot(data=standings, aes(x=left, y = total_points, label = rownames(standings))) +
geom_point(shape = 1, size = 3) +
geom_text(hjust = 1.2)
graph
library(ggplot2)
pointsline <- mean(standings$total_points)
moneyline <- mean(standings$left)
graph <-    ggplot(data=standings, aes(x=left, y = total_points, label = rownames(standings))) +
geom_point(shape = 1, size = 3) +
geom_text(hjust = 1.1)
graph
library(ggplot2)
pointsline <- mean(standings$total_points)
moneyline <- mean(standings$left)
graph <-    ggplot(data=standings, aes(x=left, y = total_points, label = rownames(standings))) +
geom_point(shape = 1, size = 3) +
geom_text(hjust = 1.1) +
geom_abline(intercept=pointsline, slope = 0)
graph
library(ggplot2)
pointsline <- mean(standings$total_points)
moneyline <- mean(standings$left)
graph <-    ggplot(data=standings, aes(x=left, y = total_points, label = rownames(standings))) +
geom_point(shape = 1, size = 3) +
geom_text(hjust = 1.1) +
geom_vline(xintercept = moneyline) +
geom_hline(yintercept = pointsline)
graph
library(ggplot2)
pointsline <- mean(standings$total_points)
moneyline <- mean(standings$left)
graph <-    ggplot(data=standings, aes(x=left, y = total_points, label = rownames(standings))) +
geom_point(shape = 1, size = 3) +
geom_text(hjust = 1.1) +
geom_vline(xintercept = moneyline, color = "blue",linetype="londash") +
geom_hline(yintercept = pointsline, color = "blue",linetype="londash")
graph
library(ggplot2)
pointsline <- mean(standings$total_points)
moneyline <- mean(standings$left)
graph <-    ggplot(data=standings, aes(x=left, y = total_points, label = rownames(standings))) +
geom_point(shape = 1, size = 3) +
geom_text(hjust = 1.1) +
geom_vline(xintercept = moneyline, color = "blue",linetype="longdash") +
geom_hline(yintercept = pointsline, color = "blue",linetype="longdash")
graph
library(ggplot2)
pointsline <- mean(standings$total_points)
moneyline <- mean(standings$left)
graph <-    ggplot(data=standings, aes(x=left, y = total_points, label = rownames(standings))) +
geom_point(shape = 1, size = 3) +
geom_text(hjust = 1.1) +
stat_smooth(method=lm, se=FALSE)
graph
?png
library(ggplot2)
pointsline <- mean(standings$total_points)
moneyline <- mean(standings$left)
moneyvspoints <-    ggplot(data=standings, aes(x=left, y = total_points, label = rownames(standings))) +
geom_point(shape = 1, size = 3) +
geom_text(hjust = 1.1) +
stat_smooth(method=lm, se=FALSE) +
xlab("Dollars Remaining") +
ylab("Current Points")
png(file = "moneyvspoints.png",width = 600, height = 600)
moneyvspoints
dev.off()
marmaduke
