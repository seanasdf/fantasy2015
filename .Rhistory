for (team in teams) {
temp <- merge(get(team), hitter_projections, by = "Name", all.x = TRUE, sort = FALSE)
assign(team, temp)
remove(temp)
}
#Merge in pitcher projections
for (team in teams) {
temp <- merge(get(team), pitcher_projections, by = "Name", all.x = TRUE, sort = FALSE)
temp$position <- temp$position.x
temp$playerid <- temp$playerid.x
temp$adjusted_points <- temp$adjusted_points.x
temp$dollar_value <- temp$dollar_value.x
if (position.y == "pitcher") {
temp$position <- temp$position.y
temp$playerid <- temp$playerid.y
temp$adjusted_points <- temp$adjusted_points.y
temp$dollar_value <- temp$dollar_value.y
}
temp$position.x <- NULL
temp$playerid.x <- NULL
temp$adjusted_points.x <- NULL
temp$dollar_value.x <- NULL
temp$position.y <- NULL
temp$playerid.y <- NULL
temp$adjusted_points.y <- NULL
temp$dollar_value.y <- NULL
assign(team, temp)
remove(temp)
}
#
# #delete duplicate columns
# library(reshape2)
#
# for (team in teams) {
#       temp <- get(team)
#       names(temp)[4] <- "playerid1"
#       names(temp)[5] <- "position1"
#       names(temp)[11] <- "adjusted_points1"
#       names(temp)[12] <- "dollar_value1"
#       names(temp)[13] <- "playerid2"
#       names(temp)[14] <- "position2"
#       names(temp)[21] <- "adjusted_points2"
#       names(temp)[22] <- "dollar_value2"
#
#
#       temp <- melt(temp?
#
#       assign(team, temp)
#
#
# }
marmaduke
setwd("C:\\Users\\Sean\\Documents\\Fantasy\\Fantasy Baseball 2015")
source("valuecalculator.R")
source("leaguesetup.R")
source("draftpicks.R")
marmaduke
#set up file
setwd("C:\\Users\\Sean\\Documents\\Fantasy\\Fantasy Baseball 2015")
library(dplyr)
###############################################################
################HITTER STUFF LIVES HERE#########################
################################################################
#Create string of hitter positions.
hitter_positions <- c("catcher",
"first_base",
"second_base",
"shortstop",
"third_base",
"outfield",
"dh"
)
#Import and clean data on replacement levels
#read in league wide csv
replacement_hitters <- read.csv("replacement_hitters.csv")
#convert factor variable to a string
replacement_hitters[,1] <- toString(replacement_hitters[,1])
#rename position values
replacement_hitters[1,1] <- "catcher"
replacement_hitters[2,1] <- "first_base"
replacement_hitters[3,1] <- "second_base"
replacement_hitters[4,1] <- "shortstop"
replacement_hitters[5,1] <- "third_base"
replacement_hitters[6,1] <- "middle_infield"
replacement_hitters[7,1] <- "corner_infield"
replacement_hitters[8,1] <- "outfield"
replacement_hitters[9,1] <- "dh"
#rename columns
names(replacement_hitters) <- c("position",
"replacement_runs",
"replacement_HR",
"replacement_RBI",
"replacement_SB",
"replacement_AVG")
#create separate data frame for each position
for (i in hitter_positions) {
#create temporary data frame based on position
temp_data_frame <- data.frame(read.csv(paste(i,".csv",sep=""))[,c(1:3,7:9,13,16:17,29)])
#get replacement level projections for each position
for (column in 11:15) {
temp_data_frame[,column] <- replacement_hitters[replacement_hitters$position == i,column-9]
names(temp_data_frame)[column] <- names(replacement_hitters)[column-9]
}
#assign temporary data frame to a new data frame
blah <- paste(i,"_projections", sep = "")
assign(blah, temp_data_frame, env=.GlobalEnv)
#drop temporary variable
remove(temp_data_frame)
}
projection_dfs <- c("catcher_projections",
"dh_projections",
"first_base_projections",
"outfield_projections",
"second_base_projections",
"shortstop_projections",
"third_base_projections")
#calculate marginal value of each position
for (position in projection_dfs) {
temp <- get(position)
#get clean frame with only relevant info
names(temp)[1] <- "Name"
temp$position <- gsub("_projections","",position)
temp <- temp[c("Name","position","playerid", "PA",
"R","HR","RBI","SB","AVG",
"replacement_runs", "replacement_HR", "replacement_RBI", "replacement_SB","replacement_AVG" )]
#calculate statistics over replacement
temp$marginal_runs <- temp[,5] - temp[,10]
temp$marginal_hr <- temp[,6] - temp[,11]
temp$marginal_rbi <- temp[,7] - temp[,12]
temp$marginal_sb <- temp[,8] - temp[,13]
temp$marginal_avg <- temp[,9] - temp[,14]
#calculate marginal points in the league
temp$marginal_runs_points <- temp$marginal_runs * .035181
temp$marginal_hr_points <- temp$marginal_hr * 0.112885207
temp$marginal_rbi_points <- temp$marginal_runs * 0.037956355
temp$marginal_sb_points <- temp$marginal_runs * 0.143642896
temp$marginal_avg_points <- temp$marginal_avg * 43.82487061
temp$marginal_total_points <- temp$marginal_runs_points +
temp$marginal_hr_points +
temp$marginal_rbi_points +
temp$marginal_sb_points +
temp$marginal_avg_points
temp$adjusted_points <- temp$marginal_total_points - 2.2
temp$dollar_value <- (temp$adjusted_points/893.5)*2925+2
temp <- temp[order(-temp$marginal_total_points),]
assign(position, temp)
remove(temp)
}
#merge projections for different positions together.
for (position in projection_dfs) {
if (!exists("hitter_projections")) {
hitter_projections <- get(position)
}
else {
hitter_projections <- rbind(hitter_projections, get(position))
}
}
#get how many times a player appears in projection list, what the strongest position is.
hitter_level <- hitter_projections %>%
group_by(playerid) %>%
summarise(times_appears = n(), max_points = max(dollar_value))
#Merge in numbers calculated above
hitter_projections <- merge(x = hitter_projections, y = hitter_level, by = "playerid", all.x = TRUE)
#delete any "DH" positions where someone is eligible for another position.
hitter_projections <- filter(hitter_projections,
position != "dh" | times_appears == 1)
#keep only a player's strongest position
hitter_projections <- filter(hitter_projections,
dollar_value == max_points)
#Sort by dollar value in descending order
hitter_projections <- hitter_projections[order(-hitter_projections$marginal_total_points),]
#drop any players worth less than $5
hitter_projections <- filter(hitter_projections, dollar_value >= -5)
#keep only relevant columns
hitter_projections <- select(hitter_projections, Name, position, R, HR, RBI, SB, AVG, adjusted_points, dollar_value)
#round dollar values and adjusted points
hitter_projections$adjusted_points <- round(hitter_projections$adjusted_points, digits = 2)
hitter_projections$dollar_value <- round(hitter_projections$dollar_value, digits = 2)
#output to a csv
write.csv(hitter_projections, file = "hitter_projections.csv")
################################################################
################PITCHER STUFF LIVES HERE########################
################################################################
#read in projections
pitcher_projections <- read.csv("pitchers.csv", stringsAsFactors=FALSE)
#keep only relevant columns
pitcher_projections <- pitcher_projections[,c(1:2,4,7,8,12,14,20)]
pitcher_projections$position <- "pitcher"
#rename columns
names(pitcher_projections)[1] <- "Name"
names(pitcher_projections)[6] <- "K"
#reorder columns
pitcher_projections <- pitcher_projections[c("Name","position","playerid","IP","ERA","WHIP","W","SV","K")]
#create replacement pitcher values
replacement_pitcher <- c(4.47,1.4,4,1,102)
names(replacement_pitcher) <- c("ERA","WHIP","W","SV","K")
#calcualte marginal stats
for (stat in names(replacement_pitcher)) {
pitcher_projections[paste("marginal_",stat,sep="")] <- pitcher_projections[stat]-replacement_pitcher[stat]
}
#calculate marginal points for each category
#marginal era points
pitcher_projections$marginal_era_points <-      (pitcher_projections$marginal_ERA*-12.4)*
(pitcher_projections$IP/1464)
#marginal whip points
pitcher_projections$marginal_whip_points <-     (pitcher_projections$marginal_WHIP*-75)*
(pitcher_projections$IP/1464)
#marginal win points
pitcher_projections$marginal_win_points <-  pitcher_projections$marginal_W*.25
#marginal save points
pitcher_projections$marginal_save_points <- pitcher_projections$marginal_SV*.14
#marginal strikeout points
pitcher_projections$marginal_strikeout_points <- pitcher_projections$marginal_K*.02
#calculate total marginal points
pitcher_projections$total_marginal_points <-    pitcher_projections$marginal_era_points +
pitcher_projections$marginal_whip_points +
pitcher_projections$marginal_win_points +
pitcher_projections$marginal_save_points +
pitcher_projections$marginal_strikeout_points
#calculate adjusted points
pitcher_projections$adjusted_points <- pitcher_projections$total_marginal_points - 1.61
#calculate dollar value
pitcher_projections$dollar_value <- (pitcher_projections$adjusted_points/664.4132)*1872
#sort by dollar value
pitcher_projections <- pitcher_projections[order(-pitcher_projections$dollar_value),]
#drop superfluous variables
pitcher_projections <- pitcher_projections[c("Name","position","playerid","IP","ERA","WHIP","SV","W","K","adjusted_points","dollar_value")]
#drop players worth less than -$5
pitcher_projections <- filter(pitcher_projections,dollar_value >= -5)
#round dollars and adjusted_points
pitcher_projections[,10:11] <- round(pitcher_projections[,10:11],2)
#write out to a csv
write.csv(pitcher_projections, file = "pitcher_projections.csv")
detach("package:dplyr",unload = TRUE)
library("plyr")
#Merge hitter and pitcher projections
player_projections <- rbind.fill(hitter_projections, pitcher_projections)
player_projections <- player_projections[order(-player_projections$dollar_value),]
detach("package:plyr",unload = TRUE)
#write player projections to csv
write.csv(player_projections, file = "player_projections.csv")
################################################################
#################LEAGUE STUFF LIVES HERE########################
################################################################
library("dplyr")
#list of teams
teams <- c("marmaduke",
"pk dodgers",
"ottawa",
"isotopes",
"jobu",
"d&s",
"virginia",
"deano",
"dembums",
"bellevegas",
"bay city",
"balco",
"sturgeon",
"rippe",
"pasadena",
"deener",
"counsel",
"bears")
positions <- c("C","1B","2B","SS","3B","CI","MI","OF1","OF2","OF3","OF4","OF5","OF6","DH",
"P1","P2","P3","P4","P5","P6","P7","P8","P9","P10",
"B1","B2","B3","B4","B5","B6","B7","B8","B9","B10")
#create data frame for each team.
for (team in teams) {
assign(team,
data.frame(roster_spot = positions,
salary = 0,
playerid = "",
Name = "",
row.names = positions,
stringsAsFactors = FALSE
),
env = .GlobalEnv
)
}
draft <- function(team, player, salary, pos) {
#create vector of repetitive positions
specialcases <- c("OF1","OF2","OF3","OF4","OF5","OF6",
"P1","P2","P3","P4","P5","P6","P7","P8","P9","P10",
"B1","B2","B3","B4","B5","B6","B7","B8","B9","B10")
#Create temporary vector for team name
temp <- get(team)
#assign values to relevant positions
if (!(pos == "OF" | pos == "P" | pos == "B")) {
temp[pos,"salary"] <- salary
temp[pos,"Name"] <- player
}
#Handle pitchers, outfielders, bench players
else {
if (pos == "OF") {
for (i in 1:6) {
outfield_number <- paste(pos, i, sep = "")
if (temp[outfield_number,"Name"] == "") {
temp[outfield_number,"salary"] <- salary
temp[outfield_number,"Name"] <- player
break
}
}
}
else if (pos == "P") {
for (i in 1:10) {
pitcher_number <- paste(pos, i, sep = "")
if (temp[pitcher_number,"Name"] == "") {
temp[pitcher_number,"salary"] <- salary
temp[pitcher_number,"Name"] <- player
break
}
}
}
else if (pos == "B") {
for (i in 1:10) {
bench_number <- paste(pos, i, sep = "")
if (temp[bench_number,"Name"] == "") {
temp[bench_number,"salary"] <- salary
temp[bench_number,"Name"] <- player
break
}
}
}
}
#temp <- temp[positions,]
assign(team, temp, env = .GlobalEnv)
}
#set up file
setwd("C:\\Users\\Sean\\Documents\\Fantasy\\Fantasy Baseball 2015")
library(dplyr)
###############################################################
################HITTER STUFF LIVES HERE#########################
################################################################
#Create string of hitter positions.
hitter_positions <- c("catcher",
"first_base",
"second_base",
"shortstop",
"third_base",
"outfield",
"dh"
)
#Import and clean data on replacement levels
#read in league wide csv
replacement_hitters <- read.csv("replacement_hitters.csv")
#convert factor variable to a string
replacement_hitters[,1] <- toString(replacement_hitters[,1])
#rename position values
replacement_hitters[1,1] <- "catcher"
replacement_hitters[2,1] <- "first_base"
replacement_hitters[3,1] <- "second_base"
replacement_hitters[4,1] <- "shortstop"
replacement_hitters[5,1] <- "third_base"
replacement_hitters[6,1] <- "middle_infield"
replacement_hitters[7,1] <- "corner_infield"
replacement_hitters[8,1] <- "outfield"
replacement_hitters[9,1] <- "dh"
#rename columns
names(replacement_hitters) <- c("position",
"replacement_runs",
"replacement_HR",
"replacement_RBI",
"replacement_SB",
"replacement_AVG")
#create separate data frame for each position
for (i in hitter_positions) {
#create temporary data frame based on position
temp_data_frame <- data.frame(read.csv(paste(i,".csv",sep=""))[,c(1:3,7:9,13,16:17,29)])
#get replacement level projections for each position
for (column in 11:15) {
temp_data_frame[,column] <- replacement_hitters[replacement_hitters$position == i,column-9]
names(temp_data_frame)[column] <- names(replacement_hitters)[column-9]
}
#assign temporary data frame to a new data frame
blah <- paste(i,"_projections", sep = "")
assign(blah, temp_data_frame, env=.GlobalEnv)
#drop temporary variable
remove(temp_data_frame)
}
projection_dfs <- c("catcher_projections",
"dh_projections",
"first_base_projections",
"outfield_projections",
"second_base_projections",
"shortstop_projections",
"third_base_projections")
#calculate marginal value of each position
for (position in projection_dfs) {
temp <- get(position)
#get clean frame with only relevant info
names(temp)[1] <- "Name"
temp$position <- gsub("_projections","",position)
temp <- temp[c("Name","position","playerid", "PA",
"R","HR","RBI","SB","AVG",
"replacement_runs", "replacement_HR", "replacement_RBI", "replacement_SB","replacement_AVG" )]
#calculate statistics over replacement
temp$marginal_runs <- temp[,5] - temp[,10]
temp$marginal_hr <- temp[,6] - temp[,11]
temp$marginal_rbi <- temp[,7] - temp[,12]
temp$marginal_sb <- temp[,8] - temp[,13]
temp$marginal_avg <- temp[,9] - temp[,14]
#calculate marginal points in the league
temp$marginal_runs_points <- temp$marginal_runs * .035181
temp$marginal_hr_points <- temp$marginal_hr * 0.112885207
temp$marginal_rbi_points <- temp$marginal_runs * 0.037956355
temp$marginal_sb_points <- temp$marginal_runs * 0.143642896
temp$marginal_avg_points <- temp$marginal_avg * 43.82487061
temp$marginal_total_points <- temp$marginal_runs_points +
temp$marginal_hr_points +
temp$marginal_rbi_points +
temp$marginal_sb_points +
temp$marginal_avg_points
temp$adjusted_points <- temp$marginal_total_points - 2.2
temp$dollar_value <- (temp$adjusted_points/893.5)*2925+2
temp <- temp[order(-temp$marginal_total_points),]
assign(position, temp)
remove(temp)
}
#merge projections for different positions together.
for (position in projection_dfs) {
if (!exists("hitter_projections")) {
hitter_projections <- get(position)
}
else {
hitter_projections <- rbind(hitter_projections, get(position))
}
}
#get how many times a player appears in projection list, what the strongest position is.
hitter_level <- hitter_projections %>%
group_by(playerid) %>%
summarise(times_appears = n(), max_points = max(dollar_value))
#Merge in numbers calculated above
hitter_projections <- merge(x = hitter_projections, y = hitter_level, by = "playerid", all.x = TRUE)
#delete any "DH" positions where someone is eligible for another position.
hitter_projections <- filter(hitter_projections,
position != "dh" | times_appears == 1)
#keep only a player's strongest position
hitter_projections <- filter(hitter_projections,
dollar_value == max_points)
#Sort by dollar value in descending order
hitter_projections <- hitter_projections[order(-hitter_projections$marginal_total_points),]
#drop any players worth less than $5
hitter_projections <- filter(hitter_projections, dollar_value >= -5)
#keep only relevant columns
hitter_projections <- select(hitter_projections, Name, position, R, HR, RBI, SB, AVG, adjusted_points, dollar_value)
#round dollar values and adjusted points
hitter_projections$adjusted_points <- round(hitter_projections$adjusted_points, digits = 2)
hitter_projections$dollar_value <- round(hitter_projections$dollar_value, digits = 2)
#output to a csv
write.csv(hitter_projections, file = "hitter_projections.csv")
################################################################
################PITCHER STUFF LIVES HERE########################
################################################################
#read in projections
pitcher_projections <- read.csv("pitchers.csv", stringsAsFactors=FALSE)
#keep only relevant columns
pitcher_projections <- pitcher_projections[,c(1:2,4,7,8,12,14,20)]
pitcher_projections$position <- "pitcher"
#rename columns
names(pitcher_projections)[1] <- "Name"
names(pitcher_projections)[6] <- "K"
#reorder columns
pitcher_projections <- pitcher_projections[c("Name","position","playerid","IP","ERA","WHIP","W","SV","K")]
#create replacement pitcher values
replacement_pitcher <- c(4.47,1.4,4,1,102)
names(replacement_pitcher) <- c("ERA","WHIP","W","SV","K")
#calcualte marginal stats
for (stat in names(replacement_pitcher)) {
pitcher_projections[paste("marginal_",stat,sep="")] <- pitcher_projections[stat]-replacement_pitcher[stat]
}
#calculate marginal points for each category
#marginal era points
pitcher_projections$marginal_era_points <-      (pitcher_projections$marginal_ERA*-12.4)*
(pitcher_projections$IP/1464)
#marginal whip points
pitcher_projections$marginal_whip_points <-     (pitcher_projections$marginal_WHIP*-75)*
(pitcher_projections$IP/1464)
#marginal win points
pitcher_projections$marginal_win_points <-  pitcher_projections$marginal_W*.25
#marginal save points
pitcher_projections$marginal_save_points <- pitcher_projections$marginal_SV*.14
#marginal strikeout points
pitcher_projections$marginal_strikeout_points <- pitcher_projections$marginal_K*.02
#calculate total marginal points
pitcher_projections$total_marginal_points <-    pitcher_projections$marginal_era_points +
pitcher_projections$marginal_whip_points +
pitcher_projections$marginal_win_points +
pitcher_projections$marginal_save_points +
pitcher_projections$marginal_strikeout_points
#calculate adjusted points
pitcher_projections$adjusted_points <- pitcher_projections$total_marginal_points - 1.61
#calculate dollar value
pitcher_projections$dollar_value <- (pitcher_projections$adjusted_points/664.4132)*1872
#sort by dollar value
pitcher_projections <- pitcher_projections[order(-pitcher_projections$dollar_value),]
#drop superfluous variables
pitcher_projections <- pitcher_projections[c("Name","position","playerid","IP","ERA","WHIP","SV","W","K","adjusted_points","dollar_value")]
#drop players worth less than -$5
pitcher_projections <- filter(pitcher_projections,dollar_value >= -5)
#round dollars and adjusted_points
pitcher_projections[,10:11] <- round(pitcher_projections[,10:11],2)
#write out to a csv
write.csv(pitcher_projections, file = "pitcher_projections.csv")
detach("package:dplyr",unload = TRUE)
library("plyr")
#Merge hitter and pitcher projections
player_projections <- rbind.fill(hitter_projections, pitcher_projections)
player_projections <- player_projections[order(-player_projections$dollar_value),]
detach("package:plyr",unload = TRUE)
#write player projections to csv
write.csv(player_projections, file = "player_projections.csv")
